//go:build ignore
// +build ignore

package main

import (
	"bytes"
	"fmt"
	"io"
	"os"
)

func main() {
	var t [256]uint32
	initTable(&t)
	buf := new(bytes.Buffer)
	printTable(buf, &t)
	err := os.WriteFile("table.go", buf.Bytes(), 0644)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

const poly = 0x1864CFB

func initTable(t *[256]uint32) {
	t[1] = poly
	h := t[1]
	for i := 2; i < len(t); i *= 2 {
		h <<= 1
		if (h & 0x1000000) != 0 {
			h ^= poly
		}
		for j := 0; j < i; j++ {
			t[i+j] = t[j] ^ h
		}
	}
}

const head = `// Code generated by mktable.go; DO NOT EDIT.

package crc24q

var table = [256]uint32{`

const entry = "\n\t0x%08[2]X,"
const tail = "\n}\n"

func printTable(w io.Writer, t *[256]uint32) {
	fmt.Fprint(w, head)
	for i := 0; i < len(t); i++ {
		fmt.Fprintf(w, entry, i, t[i])
	}
	fmt.Fprint(w, tail)
}
